import { ParseResult } from './interfaces/parse-result';
import { ParseConfig } from './interfaces/parse-config';
import { UnparseConfig } from './interfaces/unparse-config';
import * as ɵngcc0 from '@angular/core';
export declare class Papa {
    _papa: any;
    /**
     * Parse CSV to an array
     */
    parse(csv: string | File, config?: ParseConfig): ParseResult;
    /**
     * Convert an array into CSV
     */
    unparse(data: any, config?: UnparseConfig): string;
    /**
     * Set the size in bytes of each file chunk.
     * Used when streaming files obtained from the DOM that
     * exist on the local computer. Default 10 MB.
     */
    setLocalChunkSize(value: number): void;
    /**
     * Set the size in bytes of each remote file chunk.
     * Used when streaming remote files. Default 5 MB.
     */
    setRemoteChunkSize(value: number): void;
    /**
     * Set the delimiter used when it is left unspecified and cannot be detected automatically. Default is comma.
     */
    setDefaultDelimiter(value: string): void;
    /**
     * An array of characters that are not allowed as delimiters.
     */
    readonly badDelimiters: any;
    /**
     * The true delimiter. Invisible. ASCII code 30.
     * Should be doing the job we strangely rely upon commas and tabs for.
     */
    readonly recordSeparator: any;
    /**
     * Also sometimes used as a delimiting character. ASCII code 31.
     */
    readonly unitSeparator: any;
    /**
     * Whether or not the browser supports HTML5 Web Workers.
     * If false, worker: true will have no effect.
     */
    readonly workersSupported: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Papa, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Papa>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFwYS5kLnRzIiwic291cmNlcyI6WyJwYXBhLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhcnNlUmVzdWx0IH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BhcnNlLXJlc3VsdCc7XG5pbXBvcnQgeyBQYXJzZUNvbmZpZyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wYXJzZS1jb25maWcnO1xuaW1wb3J0IHsgVW5wYXJzZUNvbmZpZyB9IGZyb20gJy4vaW50ZXJmYWNlcy91bnBhcnNlLWNvbmZpZyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQYXBhIHtcbiAgICBfcGFwYTogYW55O1xuICAgIC8qKlxuICAgICAqIFBhcnNlIENTViB0byBhbiBhcnJheVxuICAgICAqL1xuICAgIHBhcnNlKGNzdjogc3RyaW5nIHwgRmlsZSwgY29uZmlnPzogUGFyc2VDb25maWcpOiBQYXJzZVJlc3VsdDtcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGFuIGFycmF5IGludG8gQ1NWXG4gICAgICovXG4gICAgdW5wYXJzZShkYXRhOiBhbnksIGNvbmZpZz86IFVucGFyc2VDb25maWcpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzaXplIGluIGJ5dGVzIG9mIGVhY2ggZmlsZSBjaHVuay5cbiAgICAgKiBVc2VkIHdoZW4gc3RyZWFtaW5nIGZpbGVzIG9idGFpbmVkIGZyb20gdGhlIERPTSB0aGF0XG4gICAgICogZXhpc3Qgb24gdGhlIGxvY2FsIGNvbXB1dGVyLiBEZWZhdWx0IDEwIE1CLlxuICAgICAqL1xuICAgIHNldExvY2FsQ2h1bmtTaXplKHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgc2l6ZSBpbiBieXRlcyBvZiBlYWNoIHJlbW90ZSBmaWxlIGNodW5rLlxuICAgICAqIFVzZWQgd2hlbiBzdHJlYW1pbmcgcmVtb3RlIGZpbGVzLiBEZWZhdWx0IDUgTUIuXG4gICAgICovXG4gICAgc2V0UmVtb3RlQ2h1bmtTaXplKHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGVsaW1pdGVyIHVzZWQgd2hlbiBpdCBpcyBsZWZ0IHVuc3BlY2lmaWVkIGFuZCBjYW5ub3QgYmUgZGV0ZWN0ZWQgYXV0b21hdGljYWxseS4gRGVmYXVsdCBpcyBjb21tYS5cbiAgICAgKi9cbiAgICBzZXREZWZhdWx0RGVsaW1pdGVyKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGFsbG93ZWQgYXMgZGVsaW1pdGVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBiYWREZWxpbWl0ZXJzOiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIHRydWUgZGVsaW1pdGVyLiBJbnZpc2libGUuIEFTQ0lJIGNvZGUgMzAuXG4gICAgICogU2hvdWxkIGJlIGRvaW5nIHRoZSBqb2Igd2Ugc3RyYW5nZWx5IHJlbHkgdXBvbiBjb21tYXMgYW5kIHRhYnMgZm9yLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlY29yZFNlcGFyYXRvcjogYW55O1xuICAgIC8qKlxuICAgICAqIEFsc28gc29tZXRpbWVzIHVzZWQgYXMgYSBkZWxpbWl0aW5nIGNoYXJhY3Rlci4gQVNDSUkgY29kZSAzMS5cbiAgICAgKi9cbiAgICByZWFkb25seSB1bml0U2VwYXJhdG9yOiBhbnk7XG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhlIGJyb3dzZXIgc3VwcG9ydHMgSFRNTDUgV2ViIFdvcmtlcnMuXG4gICAgICogSWYgZmFsc2UsIHdvcmtlcjogdHJ1ZSB3aWxsIGhhdmUgbm8gZWZmZWN0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHdvcmtlcnNTdXBwb3J0ZWQ6IGJvb2xlYW47XG59XG4iXX0=